name: CI/CD project

on: 
    push:
        branches:
            - main

jobs: 
    python_build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup python
              uses: actions/setup-python@v4
              with: 
                python-version: '3.10'

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r ./CalculatorService/requirements.txt

            - name: Run tests
              run: |
                pytest ./CalculatorService/tests

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                username: ${{secrets.DOCKER_USERNAME}}
                password: ${{secrets.DOCKER_PASSWORD}}
            
            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with:
                context: .
                file: ./CalculatorService/Dockerfile
                push: true
                tags: ${{secrets.DOCKER_PSEUDO}}/calculator-microservice:latest

    java_build:
      name: Build Native Image
      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Set up GraalVM
          uses: graalvm/setup-graalvm@v1
          with:
            version: "22.3.3"
            java-version: '17'

        - name: Install native-image
          run: |
            gu install native-image

        - name: Build native image
          run: |
            chmod 777 ./LoggerService/gradlew
            export SHELL=/bin/bash
            cd LoggerService
            ./gradlew clean build -Dquarkus.native.enabled=true -Dquarkus.native.container-build=true -Dquarkus.package.jar.enabled=false

        - name: Verify native binary
          run: |
            ls -lh LoggerService/build/*-runner

        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{secrets.DOCKER_USERNAME}}
            password: ${{secrets.DOCKER_PASSWORD}}

        - name: Build and push Docker image
          uses: docker/build-push-action@v4
          with:
            context: .
            file: ./LoggerService/src/main/docker/Dockerfile.native
            push: true
            tags: ${{secrets.DOCKER_PSEUDO}}/logger-microservice:latest

    db_build:
      name: build db image
      runs-on: ubuntu-latest

      steps:

        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{secrets.DOCKER_USERNAME}}
            password: ${{secrets.DOCKER_PASSWORD}}

        - name: Build and push Docker image
          uses: docker/build-push-action@v4
          with:
            context: ./DatabaseService
            file: ./DatabaseService/Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_PSEUDO }}/custom-mariadb:latest
            build-args: |
              MARIADB_ROOT_PASSWORD=${{ secrets.MARIADB_PASSWORD }}
    
    minikube_deploy:
      name: Start Minikube and Deploy Services
      runs-on: ubuntu-latest
      needs: [python_build, db_build, java_build]
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Set up Minikube
          uses: medyagh/setup-minikube@master

        - name: Try the k8s cluster
          run: |
            minikube tunnel -p minikube &
            kubectl get nodes

        - name: Install istio CLI for gateway
          run: |
            curl -L https://istio.io/downloadIstio | sh -
              cd istio-*
              export PATH=$PWD/bin:$PATH
              istioctl install --set profile=demo -y
              istioctl version
              kubectl get crds | grep istio

              kubectl label namespace default istio-injection=enabled


        - name: Deploy deployment to Minikube
          run: |
            kubectl config use-context minikube

            kubectl apply -f ./k8s/mariadb/mariadb-secret.yml
      
            kubectl apply -f ./k8s/calculator/deployment.yml
            kubectl apply -f ./k8s/mariadb/deployment.yml
            kubectl apply -f ./k8s/logger/deployment.yml


        - name: Wait for pods to be ready
          run: |
              kubectl wait --for=condition=Ready pod -l app=calculator --timeout=60s
              kubectl wait --for=condition=Ready pod -l app=mariadb --timeout=60s
              kubectl wait --for=condition=Ready pod -l app=logger --timeout=60s
        - name: Verify deployment
          run: |

            kubectl get pods

        - name: Expose services
          run: |
              kubectl apply -f ./k8s/calculator/service.yml
              kubectl apply -f ./k8s/mariadb/service.yml
              kubectl apply -f ./k8s/logger/service.yml
              

        - name: Verify services
          run: |

            kubectl get services

        - name: Deploy gateway and virtual service
          run: |

            kubectl apply -f ./k8s/calculator/gateway.yml
            kubectl apply -f ./k8s/calculator/virtual-service.yml

            kubectl apply -f ./k8s/logger/gateway.yml
            kubectl apply -f ./k8s/logger/virtual-service.yml

        - name: Verify gateway and virtual service
          run: |

            kubectl get gateways
            kubectl get virtualservices

            kubectl get svc -n istio-system

        - name: Get Istio External IP
          run: |
            for i in {1..10}; do
              INGRESS_IP=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -n "$INGRESS_IP" ]; then
                echo "Ingress IP found: $INGRESS_IP"
                echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV
                exit 0
              fi
              echo "Waiting for Ingress IP..."
              sleep 10
            done
            echo "Failed to obtain Ingress IP" && exit 1
          
        - name: Test API with curl
          run: curl -v "http://${{ env.INGRESS_IP }}/calculator/add?val1=10&val2=20"

        - name: Verify database entry
          run: |
            MARIADB_POD=$(kubectl get pods -l app=mariadb -o jsonpath='{.items[0].metadata.name}')
            kubectl exec -it $MARIADB_POD -- mysql -u ${{ secrets.MARIADB_USER }} -p${{ secrets.MARIADB_PASSWORD }} -D Logs -e "SELECT * FROM LogTable WHERE calculus LIKE '%10 + 20%';"

        
